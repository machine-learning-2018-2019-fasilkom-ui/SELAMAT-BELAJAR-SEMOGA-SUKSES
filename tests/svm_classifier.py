from model.svm import SVMClassifier
import numpy as np

def gen_svm():
    X = np.zeros((100,2))
    np.random.seed(64)
    X[0:50,0] = np.random.uniform(-3,1,50)
    np.random.seed(36)
    X[0:50,1] = np.random.uniform(-3,1,50)

    np.random.seed(64)
    X[50:,0] = np.random.uniform(2,4,50)
    np.random.seed(36)
    X[50:,1] = np.random.uniform(-2,6,50)
    y = np.array([-1 if i < 50 else 1 for i in range(100)])

    svm = SVMClassifier(kernel='poly', poly_c=1, poly_d=3)
    svm.fit(X,y)
    return X,y,svm


if __name__ == '__main__':
    X, y, svm = gen_svm()

    g = np.array([[0.95732021, -1.0710335],
                  [0.82783717, 0.2080372],
                  [2.00389699, -0.31674417],
                  [2.07133994, 3.36711104],
                  [2.03597597, 0.73548602]])
    t = np.array([-1, -1, 1, 1, 1])

    X_test = np.array([[0.53223423, 4.2422343242]])
    y_test = svm.predict(X_test)

    np.testing.assert_array_almost_equal(svm.sv, g)
    np.testing.assert_array_almost_equal(svm.svt, t)
    np.testing.assert_array_almost_equal(y_test, np.array([-1.]))

    X_train = np.array([[0.32625355, -0.94726409],
                        [-0.74441863, 0.27383975],
                        [-0.13848114, 0.79547269],
                        [0.9801023, -0.24806749],
                        [0.0621153, 1.03016724],
                        [-0.97700346, 0.09963382],
                        [-0.42244125, 0.90644976],
                        [0.49859124, -0.82198025],
                        [-0.19977433, -0.98509693],
                        [-0.82097825, -0.61862732],
                        [0.58365089, 0.54473471],
                        [0.33246961, 0.92908773],
                        [0.92758306, 0.2157438],
                        [-0.32443099, 0.75049458],
                        [-0.64006343, 0.50283855],
                        [-0.37639392, -0.71349069],
                        [0.41695202, -0.65669386],
                        [0.68918272, 0.69169911],
                        [-0.48224241, -0.60309897],
                        [0.03625237, 0.78272488],
                        [0.42309888, 0.67325122],
                        [-0.80219813, 0.09187327],
                        [0.74988172, -0.03716344],
                        [-0.60924045, -0.761042],
                        [-0.8077536, 0.58768096],
                        [-0.18963537, 0.98880677],
                        [0.65234292, -0.37208701],
                        [0.69782225, 0.37878824],
                        [0.04994162, -0.79597903],
                        [-0.96606392, -0.13882518],
                        [0.99724674, -0.01243279],
                        [0.06492594, -0.98459514],
                        [0.5305424, 0.85280978],
                        [0.2681683, 0.76388573],
                        [-0.52677094, 0.63364358],
                        [0.72899717, -0.69239112],
                        [0.57561069, -0.53852852],
                        [-0.91005325, 0.3841486],
                        [0.80153489, -0.23796694],
                        [-0.6363921, -0.47568971],
                        [-0.60705324, 0.78305409],
                        [-0.89052437, -0.36038825],
                        [0.73986824, 0.20231909],
                        [-0.15139136, -0.77562688],
                        [-0.80735838, -0.10575167],
                        [0.26652474, -0.76521636],
                        [-0.44353959, -0.90317309],
                        [0.86669567, -0.4633295],
                        [-0.76635263, -0.27189397],
                        [0.87843983, 0.47218692]])

    y_train = np.array([-1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1,
                        1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1,
                        1, 1, -1, -1, 1, -1])

    X_test = np.array([[0, 0],
                       [-1, -1],
                       [0.24342424, -0.2312321313],
                       [0.1234234124, -1],
                       [1.23412341242, -0.23421342],
                       [0.54645654456, -0.456546546456],
                       [0.324234325, -0.5654654646],
                       [0.65464654654, 0.45654646465]])

    clf = SVMClassifier(kernel='poly', poly_c=1, poly_d=3)
    clf.fit(X_train, y_train)
    y_test = clf.predict(X_test)
    g = np.array([1., -1., 1., -1., -1., 1., 1., 1.])
    np.testing.assert_array_almost_equal(y_test, g)

    print('Testing OK')
